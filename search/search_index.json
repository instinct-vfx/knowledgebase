{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"3dsmax/3dsmax_portable/","text":"Making 3ds Max portable Introduction With the release of 3ds Max 2022.3 Autodesk ships Robust Pipeline Integration . This mostly introduces the posibility to configure many of 3ds Max's paths through environment variables. This offers a lot of possibilities. This enables a lot of things impossible before, like loading plugins from arbitrary locations without plugin.ini by simply adding paths to an environment variable. Amongst the usual suspects there is also one very special easy to overlook new environment variable: ADSK_3DSMAX_x64_<year> . This enables setting the root folder of 3ds Max and running it from arbitrary places. Pre-Requisites on target machines Installing the licensing service and the SSO component Here is the first paragraph Some multi line code block Registering with the licensing service Setting up a portable environment for Max Bonus: Building a rez package Appendix: List of environment variables supported as of 2022.3 Name Description ADSK_3DSMAX_x64_ The path to the 3ds Max install. Created by the installation process. On systems where 3ds Max was copied instead of installed, this variable needs to be defined manually. ADSK_3DSMAX_ APPDATA_DIR The path used by 3ds Max to read and write local user data. By default this location is C:\\Users\\ \\AppData\\Local\\Autodesk\\3dsMax\\ - 64bit\\ ADSK_3DSMAX_SCRIPTS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Scripts folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_STARTUPSCRIPTS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Startup Scripts folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_MACROS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Macros folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_ICONS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Icons folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_PLUGINS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional MAX plug-ins folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_ASSETS_XREFS_DIR A list of semicolon-delimited paths, used in addition to the Xrefs paths defined in the Configure Project Paths dialog. ADSK_3DSMAX_ASSETS_MAPS_DIR A list of semicolon-delimited paths, used in addition to the External Files paths defined in the Configure Project Paths dialog. ADSK_3DSMAX_PROJECT_FOLDER_DIR The path for the location for project data (such as material libraries, render presets, render output, etc). If this variable is defined but the specified folder does not exist, 3ds Max creates it. This envar takes precedence over the ProjectFolder value in 3dsmax.ini. ADSK_3DSMAX_USERSETTINGS_DIR The path for reading and writing user settings. If this variable is defined but the specified folder does not exist, 3ds Max creates it. ADSK_3DSMAX_SDK_ The fully-qualified path for the 3ds Max SDK, if installed. ADSK_3DSMAX_SESSION_LOG The path to the 3ds Max session log. ADSK_APPLICATION_PLUGINS A list of semicolon-delimited paths, specifying root folders from which to load additional 3rd party application plug-ins. Each folder can either contain a plug-in, or a collection of folders containing plug-ins.","title":"Making 3ds Max portable"},{"location":"3dsmax/3dsmax_portable/#making-3ds-max-portable","text":"","title":"Making 3ds Max portable"},{"location":"3dsmax/3dsmax_portable/#introduction","text":"With the release of 3ds Max 2022.3 Autodesk ships Robust Pipeline Integration . This mostly introduces the posibility to configure many of 3ds Max's paths through environment variables. This offers a lot of possibilities. This enables a lot of things impossible before, like loading plugins from arbitrary locations without plugin.ini by simply adding paths to an environment variable. Amongst the usual suspects there is also one very special easy to overlook new environment variable: ADSK_3DSMAX_x64_<year> . This enables setting the root folder of 3ds Max and running it from arbitrary places.","title":"Introduction"},{"location":"3dsmax/3dsmax_portable/#pre-requisites-on-target-machines","text":"","title":"Pre-Requisites on target machines"},{"location":"3dsmax/3dsmax_portable/#installing-the-licensing-service-and-the-sso-component","text":"Here is the first paragraph Some multi line code block","title":"Installing the licensing service and the SSO component"},{"location":"3dsmax/3dsmax_portable/#registering-with-the-licensing-service","text":"","title":"Registering with the licensing service"},{"location":"3dsmax/3dsmax_portable/#setting-up-a-portable-environment-for-max","text":"","title":"Setting up a portable environment for Max"},{"location":"3dsmax/3dsmax_portable/#bonus-building-a-rez-package","text":"","title":"Bonus: Building a rez package"},{"location":"3dsmax/3dsmax_portable/#appendix-list-of-environment-variables-supported-as-of-20223","text":"Name Description ADSK_3DSMAX_x64_ The path to the 3ds Max install. Created by the installation process. On systems where 3ds Max was copied instead of installed, this variable needs to be defined manually. ADSK_3DSMAX_ APPDATA_DIR The path used by 3ds Max to read and write local user data. By default this location is C:\\Users\\ \\AppData\\Local\\Autodesk\\3dsMax\\ - 64bit\\ ADSK_3DSMAX_SCRIPTS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Scripts folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_STARTUPSCRIPTS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Startup Scripts folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_MACROS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Macros folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_ICONS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional Icons folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_PLUGINS_ADDON_DIR A list of semicolon-delimited paths, used in addition to the Additional MAX plug-ins folder defined in the Configure User and System Paths dialog. ADSK_3DSMAX_ASSETS_XREFS_DIR A list of semicolon-delimited paths, used in addition to the Xrefs paths defined in the Configure Project Paths dialog. ADSK_3DSMAX_ASSETS_MAPS_DIR A list of semicolon-delimited paths, used in addition to the External Files paths defined in the Configure Project Paths dialog. ADSK_3DSMAX_PROJECT_FOLDER_DIR The path for the location for project data (such as material libraries, render presets, render output, etc). If this variable is defined but the specified folder does not exist, 3ds Max creates it. This envar takes precedence over the ProjectFolder value in 3dsmax.ini. ADSK_3DSMAX_USERSETTINGS_DIR The path for reading and writing user settings. If this variable is defined but the specified folder does not exist, 3ds Max creates it. ADSK_3DSMAX_SDK_ The fully-qualified path for the 3ds Max SDK, if installed. ADSK_3DSMAX_SESSION_LOG The path to the 3ds Max session log. ADSK_APPLICATION_PLUGINS A list of semicolon-delimited paths, specifying root folders from which to load additional 3rd party application plug-ins. Each folder can either contain a plug-in, or a collection of folders containing plug-ins.","title":"Appendix: List of environment variables supported as of 2022.3"},{"location":"taowiki/blender/","text":"","title":"Blender"},{"location":"taowiki/coding/","text":"","title":"Coding"},{"location":"taowiki/contribute/","text":"","title":"Contribute to the Wiki"},{"location":"taowiki/gdc/","text":"Technical Artist Bootcamp Sessions Technical Artist Sessions Visual Arts Programming","title":"GDC Sessions"},{"location":"taowiki/houdini/","text":"Welcome to the TAO Houdini Page! These are current drops of wisdom transcribed from the fast moving current of the Slack flow. Don't get set into one form, adapt it and build your own, and let it grow, be like water. Empty your mind, be formless, shapeless \u2014 like water. Now you put water in a cup, it becomes the cup; You put water into a bottle it becomes the bottle; You put it in a teapot it becomes the teapot. Now water can flow or it can crash. Be water, my friend. -Bruce Lee Houdini Pipeline Docs","title":"Houdini"},{"location":"taowiki/math/","text":"","title":"Math"},{"location":"taowiki/max/","text":"","title":"3ds Max"},{"location":"taowiki/maya/","text":"","title":"Maya"},{"location":"taowiki/pipelines/","text":"","title":"Pipelines"},{"location":"taowiki/python3/","text":"","title":"Python3"},{"location":"taowiki/rigging/","text":"","title":"Rigging"},{"location":"taowiki/shaders/","text":"","title":"Shaders"},{"location":"taowiki/ta-101/","text":"","title":"Tech Art 101"},{"location":"taowiki/tips/","text":"","title":"Tips"},{"location":"taowiki/tools/","text":"","title":"Tools"},{"location":"taowiki/unity/","text":"","title":"Unity"},{"location":"taowiki/unreal/","text":"","title":"Unreal"},{"location":"taowiki/vfx/","text":"","title":"VFX"},{"location":"taowiki/contribute/how_to_add_page/","text":"Make sure you have followed the instructions here {:target=\"_blank\"} on setting up your development environment Things to note: Page location All of the pages need to be placed under content/pages/ Page format All of the pages should use the following Markdown format: Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: <PAGE template type : wiki_branch_page OR wiki_leaf_page > THE CONTENT OF THE PAGE... Page template types wiki_branch_page - a page that contains a list of links to the child pages (example: techartorg.github.io/contribute {:target=\"_blank\"} ) wiki_leaf_page - a page that contains information (example: this page) Steps to adding a page 1) Select a category for your page Select one of the existing categories to place your page under. Categories: blender coding contribute houdini math max maya pipelines python3 rigging shaders tips tools unity unreal vfx 2.1) Create a subcategory Markdown file and Folder (optional) If you need to create a subcategory under the category you have selected, create a new Markdown file and a folder with the same name. Here is an example of creating a python-tips subcategory under the python category folder \u2514\u2500\u2500 content/pages/ \u251c\u2500\u2500 python.md # python category Markdown file \u2514\u2500\u2500 python/ # python category folder \u251c\u2500\u2500 python-tips.md # {NEW} python-tips subcategory Markdown file \u2514\u2500\u2500 python-tips/ # {NEW} python-tips subcategory folder The Markdown file: should have the Template metadata set to wiki_branch_page the body of the file should be empty Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: wiki_branch_page 2.2) Create the Markdown file Under the subcategory folder create your new Markdown file. Example: \u2514\u2500\u2500 content/pages/ \u251c\u2500\u2500 python.md # python category Markdown file \u2514\u2500\u2500 python/ # python category folder \u251c\u2500\u2500 python-tips.md # python-tips subcategory Markdown file \u2514\u2500\u2500 python-tips/ # python-tips subcategory folder \u2514\u2500\u2500 my-python-tip.md # {NEW} python tip Markdown file Here we create a my-python-tip.md file under content/pages/python/python-tips/ . The Markdown file: should have the Template metadata set to to wiki_leaf_page the body of the file should be contain the information you want to share Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: wiki_leaf_page 3) Test your change Test your changes by running the local server Run server on macOS/Linux run: make devserver om Windows run: start peldev.bat && start pelserv.bat Go to http://localhost:8000/ 4) Create a Pull Request Go to the Pull Request page for the TAO wiki {:target=\"_blank\"} Create a New Pull Request based on your fork of the Wiki","title":"How to add a page to the Wiki"},{"location":"taowiki/contribute/how_to_add_page/#make-sure-you-have-followed-the-instructions-heretarget_blank-on-setting-up-your-development-environment","text":"","title":"Make sure you have followed the instructions here{:target=\"_blank\"}  on setting up your development environment"},{"location":"taowiki/contribute/how_to_add_page/#things-to-note","text":"","title":"Things to note:"},{"location":"taowiki/contribute/how_to_add_page/#page-location","text":"All of the pages need to be placed under content/pages/","title":"Page location"},{"location":"taowiki/contribute/how_to_add_page/#page-format","text":"All of the pages should use the following Markdown format: Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: <PAGE template type : wiki_branch_page OR wiki_leaf_page > THE CONTENT OF THE PAGE...","title":"Page format"},{"location":"taowiki/contribute/how_to_add_page/#page-template-types","text":"wiki_branch_page - a page that contains a list of links to the child pages (example: techartorg.github.io/contribute {:target=\"_blank\"} ) wiki_leaf_page - a page that contains information (example: this page)","title":"Page template types"},{"location":"taowiki/contribute/how_to_add_page/#steps-to-adding-a-page","text":"","title":"Steps to adding a page"},{"location":"taowiki/contribute/how_to_add_page/#1-select-a-category-for-your-page","text":"Select one of the existing categories to place your page under. Categories: blender coding contribute houdini math max maya pipelines python3 rigging shaders tips tools unity unreal vfx","title":"1) Select a category for your page"},{"location":"taowiki/contribute/how_to_add_page/#21-create-a-subcategory-markdown-file-and-folder-optional","text":"If you need to create a subcategory under the category you have selected, create a new Markdown file and a folder with the same name. Here is an example of creating a python-tips subcategory under the python category folder \u2514\u2500\u2500 content/pages/ \u251c\u2500\u2500 python.md # python category Markdown file \u2514\u2500\u2500 python/ # python category folder \u251c\u2500\u2500 python-tips.md # {NEW} python-tips subcategory Markdown file \u2514\u2500\u2500 python-tips/ # {NEW} python-tips subcategory folder The Markdown file: should have the Template metadata set to wiki_branch_page the body of the file should be empty Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: wiki_branch_page","title":"2.1) Create a subcategory Markdown file and Folder (optional)"},{"location":"taowiki/contribute/how_to_add_page/#22-create-the-markdown-file","text":"Under the subcategory folder create your new Markdown file. Example: \u2514\u2500\u2500 content/pages/ \u251c\u2500\u2500 python.md # python category Markdown file \u2514\u2500\u2500 python/ # python category folder \u251c\u2500\u2500 python-tips.md # python-tips subcategory Markdown file \u2514\u2500\u2500 python-tips/ # python-tips subcategory folder \u2514\u2500\u2500 my-python-tip.md # {NEW} python tip Markdown file Here we create a my-python-tip.md file under content/pages/python/python-tips/ . The Markdown file: should have the Template metadata set to to wiki_leaf_page the body of the file should be contain the information you want to share Title: <NAME OF YOUR PAGE example: Python snippet for finding ...> Date: <DATE example: 01-01-20 16:40> Description: wiki_leaf_page","title":"2.2) Create the Markdown file"},{"location":"taowiki/contribute/how_to_add_page/#3-test-your-change","text":"Test your changes by running the local server Run server on macOS/Linux run: make devserver om Windows run: start peldev.bat && start pelserv.bat Go to http://localhost:8000/","title":"3) Test your change"},{"location":"taowiki/contribute/how_to_add_page/#4-create-a-pull-request","text":"Go to the Pull Request page for the TAO wiki {:target=\"_blank\"} Create a New Pull Request based on your fork of the Wiki","title":"4) Create a Pull Request"},{"location":"taowiki/contribute/how_to_edit_page/","text":"Make sure you have followed the instructions here {:target=\"_blank\"} on setting up your development environment Steps to editing a page 1) Find the page In your web browser navigate to the page you want to make edits to. Example: http://techartorg.github.io/python3/python3-snippets/latest_installed_program {:target=\"_blank\"} At the top right of the page you will find a Edit on GitHub link. Click that link! This link will take you to the GitHub page for the corresponding Markdown file. Example: https://github.com/techartorg/techartorg.github.io/edit/master/content/pages/python3/python3-snippets/latest_installed_program.md {:target=\"_blank\"} At the top of the page you will see the full path to the file you want to edit. Example: content/pages/python3/python3-snippets/latest_installed_program.md 2) Make the edits Open the file in your favorite Text Editor Make the changes you wanted Test your changes by running the local server Run server on macOS/Linux run: make devserver om Windows run: start peldev.bat && start pelserv.bat Go to http://localhost:8000/ 3) Create a Pull Request Commit & Push Go to the Pull Request page for the TAO wiki {:target=\"_blank\"} Create a New Pull Request based on your fork of the Wiki","title":"How to edit a wiki page"},{"location":"taowiki/contribute/how_to_edit_page/#make-sure-you-have-followed-the-instructions-heretarget_blank-on-setting-up-your-development-environment","text":"","title":"Make sure you have followed the instructions here{:target=\"_blank\"}  on setting up your development environment"},{"location":"taowiki/contribute/how_to_edit_page/#steps-to-editing-a-page","text":"","title":"Steps to editing a page"},{"location":"taowiki/contribute/how_to_edit_page/#1-find-the-page","text":"In your web browser navigate to the page you want to make edits to. Example: http://techartorg.github.io/python3/python3-snippets/latest_installed_program {:target=\"_blank\"} At the top right of the page you will find a Edit on GitHub link. Click that link! This link will take you to the GitHub page for the corresponding Markdown file. Example: https://github.com/techartorg/techartorg.github.io/edit/master/content/pages/python3/python3-snippets/latest_installed_program.md {:target=\"_blank\"} At the top of the page you will see the full path to the file you want to edit. Example: content/pages/python3/python3-snippets/latest_installed_program.md","title":"1) Find the page"},{"location":"taowiki/contribute/how_to_edit_page/#2-make-the-edits","text":"Open the file in your favorite Text Editor Make the changes you wanted Test your changes by running the local server Run server on macOS/Linux run: make devserver om Windows run: start peldev.bat && start pelserv.bat Go to http://localhost:8000/","title":"2) Make the edits"},{"location":"taowiki/contribute/how_to_edit_page/#3-create-a-pull-request","text":"Commit & Push Go to the Pull Request page for the TAO wiki {:target=\"_blank\"} Create a New Pull Request based on your fork of the Wiki","title":"3) Create a Pull Request"},{"location":"taowiki/contribute/how_to_setup_dev_env/","text":"Before you start You will need the following: You will need to have a GitHub {:target=\"_blank\"} account You will need to create a Fork {:target=\"_blank\"} of techartorg/techartorg.github.io {:target=\"_blank\"} Set up a development environment Click here {:target=\"_blank\"} to see up to date instructions on setting up your dev env","title":"How to setup a development environment"},{"location":"taowiki/contribute/how_to_setup_dev_env/#before-you-start","text":"You will need the following: You will need to have a GitHub {:target=\"_blank\"} account You will need to create a Fork {:target=\"_blank\"} of techartorg/techartorg.github.io {:target=\"_blank\"}","title":"Before you start"},{"location":"taowiki/contribute/how_to_setup_dev_env/#set-up-a-development-environment","text":"Click here {:target=\"_blank\"} to see up to date instructions on setting up your dev env","title":"Set up a development environment"},{"location":"taowiki/houdini/houdini_hda_naming_conventions_without_sql_database/","text":"The naming convention of .hda and .shelf are based on the SideFX versioning architecture as described here. http://www.sidefx.com/docs/houdini/assets/namespaces.html For a .hda and a .shelf there are four major names you need to know about: * The filename on disk - company.context__assetname__1.0.hda * The operator name - company::assetname::1.0 * The operator label - Asset Name * Tab submenu entry - company\\\"collection\" Directory for HDAs & Shelfs - $HOUDINI_PATH/otls $HOUDINI_PATH/toolbar The operator name convention is the most important. First is the namespace as identified by \"company\" in our case this represent the different studios. In some cases this could represent a codename of a project when a studio or group can not be identified at that time. This prevents libraries of hda from clashing when built at different studios. Also allowing external libraries to be used. You can even use this to define teams within the same project. Second is the assetname it is the non space, non camel case, lower case name of your tool. For the label this is First word capitalized space separated asset name. The label is the human readable version. Third is the major and minor version of your asset. The major version is a number that represent a significant non-backwards compatible change to the hda. If you rework the node 100% from scratch or change a significant function of the node you update the major number. A minor version is an additive process like an additional parameter or a bug fix would not over haul. It is important not to get this confused with source control. Edits and fixes are just check in and check out of the same .hda. If you have an .hda deployed in your system and you don't want to break everyones production tools this is a good reason to major or minor version control. The double colon :: is the separate buffer used only in the operator name. For the file on disk this gets converted to an underscore. In advanced pipeline you can use a modified http file structure to store assets based on this. The context in the file on disk is inherent in the operator name of the file so it does not need to be include. It is included in the file on disk name to separate .hdas based on their internal structures which are unique. Additionally you can share the same asset name of a file in different context. This helps in scripting and OPcustomize when you do not have to load up houdini to see the name of the .hda. It is important to store one .hda or one .shelf tool per a file. This allows multiple people to work on separate tools at a time. This is very important for source control. The tab submenu entry is how you organize your tools in the tab menu. You do not need to add extra modifiers to the asset name to compensate for this. Under the company name you can add an extra folder for any collection of tools like \"Import\", \"Engine\", \"Terrain\" etc. We do not put them into the regular submenu entries because we would not be able to find our own tools. If a asset name collides this submenu entry will be bracketed () to tell you the difference. Further when creating your asset libraries use a standard $HOUDINI_PATH folder structure don't be original. This allows us to append multiple studios and libraries tools together. Like the gameshelf. Place all .hda in /otls and shelfs in /toolbar etc. Additionally do not save your .hda in exploded mode via the hotl.exe. In production environments all these separated files can cause havoc when they get out of sync on disk. You can work with the .hda like this but compile them about before distribution in your studio. For an example of folder structure you can look here: https://github.com/LaidlawFX/LaidlawFX https://github.com/sideeffects/GameDevelopmentToolset or within original source","title":"Houdini HDA Naming Conventions without a SQL database"},{"location":"taowiki/houdini/houdini_setting_up_a_studio_environment/","text":"Houdini is a very easy software to modify and integrate with whatever pipeline you have. However, the big asterisk, and the reason for this documentation is there are easier paths than others to achieve these goals. original source","title":"Houdini Setting up a studio environment"},{"location":"taowiki/max/pymxs_helpful_snippets/","text":"Selection Sets: Getting Named Selection Sets is a fairly straightforward procedure for Object Selection Sets, but it's a bit more \"difficult\" to find how to do it for object mode ones (Vert/Edge/Faces etc), so to save the hassle Getting SelSets From object modes (verts/edges/poly/etc) This is the \"same\" just change whatever mode you're looking for * Get Selection Set names from Faces Sets: import pymxs rt = pymxs.runtime thing = rt.getCurrentSelection()[0] print(thing.Faces.selSetNames) #(\"TestSet\", \"TestSet2\") # example output Obviously then you can select a set by doing something like: thing.selectedFaces = thing.Faces[\"TestSet2\"] Get All Materials Does a check to see if you have multi material on your model, if it does, iterates and tries to do a face select to check if the material is actually on the model and returns a list of material ID's and what faces have it. def get_all_mats(model): materials = [] dupe = rt.copy(model) rt.resetXForm(dupe) rt.collapseStack(dupe) material = dupe.material if rt.classOf(material) == rt.Multimaterial: for matID in xrange(material.numsubs): #see if we can select any faces for each material dupe.selectByMaterial(matID+1) faces = dupe.GetSelection(rt.name(\"Face\")) numSelected = faces.numberset if numSelected > 0: materials.append({material[matID]: numSelected}) elif rt.classOf(material) == rt.StandardMaterial: # if we only have one material we assume that it is on every face materials.append({material.name: dupe.mesh.numFaces}) rt.delete(dupe) return materials EZ Multi Import Very small multi file importer script. Drives me nuts having to import multiple fbx's etc. from PySide2 import QtWidgets import pymxs rt = pymxs.runtime def main(): dialog = QtWidgets.QFileDialog() files = dialog.getOpenFileNames(None, \"Multi Importer\", \"\", \"FBX (*.fbx);; OBJ (*.obj);; All Files (*.*)\") for f in files[0]: rt.importFile(f, rt.name(\"noPrompt\")) if __name__ == \"__main__\": main() Get all Children + define specific type of child to get Provide a node as a parent to search down from and optionally give a node type in Max to search for such as Lights, Geometry, FFD's etc. Get back a list of the children def get_all_children(parent, node_type=None): \"\"\"Handy function to get all the children of a given node Args: parent (3dsmax Node1): node to get all children of node_type (None, runtime.class): give class to check for e.g. rt.FFDBox/rt.GeometryClass etc. Returns: list: list of all children of the parent node \"\"\" def list_children(node): children = [] for c in node.Children: children.append(c) children = children + list_children(c) return children child_list = list_children(parent) return ([x for x in child_list if rt.superClassOf(x) == node_type] if node_type else child_list) Is Ancestor Check back up the tree from a node to see if a given named node is an ancestor def is_ancestor(node, name): \"\"\"Given the node, is there an ancestor named \"name\" Args: node (max Node): node to check for an ancestor on name (string): name of the ancestor to check for Returns: bool: True if the node is an ancestor \"\"\" found = False top = False curr_ancestor = node.parent if curr_ancestor.name == name: return True while curr_ancestor.parent is not None: curr_ancestor = curr_ancestor.parent if curr_ancestor.name == name: return True return False original source","title":"pymxs Helpful Snippets"},{"location":"taowiki/max/pymxs_helpful_snippets/#selection-sets","text":"Getting Named Selection Sets is a fairly straightforward procedure for Object Selection Sets, but it's a bit more \"difficult\" to find how to do it for object mode ones (Vert/Edge/Faces etc), so to save the hassle Getting SelSets From object modes (verts/edges/poly/etc) This is the \"same\" just change whatever mode you're looking for * Get Selection Set names from Faces Sets: import pymxs rt = pymxs.runtime thing = rt.getCurrentSelection()[0] print(thing.Faces.selSetNames) #(\"TestSet\", \"TestSet2\") # example output Obviously then you can select a set by doing something like: thing.selectedFaces = thing.Faces[\"TestSet2\"]","title":"Selection Sets:"},{"location":"taowiki/max/pymxs_helpful_snippets/#get-all-materials","text":"Does a check to see if you have multi material on your model, if it does, iterates and tries to do a face select to check if the material is actually on the model and returns a list of material ID's and what faces have it. def get_all_mats(model): materials = [] dupe = rt.copy(model) rt.resetXForm(dupe) rt.collapseStack(dupe) material = dupe.material if rt.classOf(material) == rt.Multimaterial: for matID in xrange(material.numsubs): #see if we can select any faces for each material dupe.selectByMaterial(matID+1) faces = dupe.GetSelection(rt.name(\"Face\")) numSelected = faces.numberset if numSelected > 0: materials.append({material[matID]: numSelected}) elif rt.classOf(material) == rt.StandardMaterial: # if we only have one material we assume that it is on every face materials.append({material.name: dupe.mesh.numFaces}) rt.delete(dupe) return materials","title":"Get All Materials"},{"location":"taowiki/max/pymxs_helpful_snippets/#ez-multi-import","text":"Very small multi file importer script. Drives me nuts having to import multiple fbx's etc. from PySide2 import QtWidgets import pymxs rt = pymxs.runtime def main(): dialog = QtWidgets.QFileDialog() files = dialog.getOpenFileNames(None, \"Multi Importer\", \"\", \"FBX (*.fbx);; OBJ (*.obj);; All Files (*.*)\") for f in files[0]: rt.importFile(f, rt.name(\"noPrompt\")) if __name__ == \"__main__\": main()","title":"EZ Multi Import"},{"location":"taowiki/max/pymxs_helpful_snippets/#get-all-children-define-specific-type-of-child-to-get","text":"Provide a node as a parent to search down from and optionally give a node type in Max to search for such as Lights, Geometry, FFD's etc. Get back a list of the children def get_all_children(parent, node_type=None): \"\"\"Handy function to get all the children of a given node Args: parent (3dsmax Node1): node to get all children of node_type (None, runtime.class): give class to check for e.g. rt.FFDBox/rt.GeometryClass etc. Returns: list: list of all children of the parent node \"\"\" def list_children(node): children = [] for c in node.Children: children.append(c) children = children + list_children(c) return children child_list = list_children(parent) return ([x for x in child_list if rt.superClassOf(x) == node_type] if node_type else child_list)","title":"Get all Children + define specific type of child to get"},{"location":"taowiki/max/pymxs_helpful_snippets/#is-ancestor","text":"Check back up the tree from a node to see if a given named node is an ancestor def is_ancestor(node, name): \"\"\"Given the node, is there an ancestor named \"name\" Args: node (max Node): node to check for an ancestor on name (string): name of the ancestor to check for Returns: bool: True if the node is an ancestor \"\"\" found = False top = False curr_ancestor = node.parent if curr_ancestor.name == name: return True while curr_ancestor.parent is not None: curr_ancestor = curr_ancestor.parent if curr_ancestor.name == name: return True return False original source","title":"Is Ancestor"},{"location":"taowiki/python3/python3-snippets/","text":"","title":"Python3 Snippets"},{"location":"taowiki/python3/python3-snippets/extract_icon_from_exe/","text":"!#python3 def extract_icon_from_exe(icon_in_path, icon_name, icon_out_path, out_width = 56, out_height = 56): \"\"\"Given an icon path (exe file) extract it and output at the desired width/height as a png image. Args: icon_in_path (string): path to the exe to extract the icon from icon_name (string): name of the icon so we can save it out with the correct name icon_out_path (string): final destination (FOLDER) - Gets combined with icon_name for full icon_path out_width (int, optional): desired icon width out_height (int, optional): desired icon height Returns: string: path to the final icon \"\"\" import win32ui import win32gui import win32con import win32api from PIL import Image ico_x = win32api.GetSystemMetrics(win32con.SM_CXICON) ico_y = win32api.GetSystemMetrics(win32con.SM_CYICON) large, small = win32gui.ExtractIconEx(icon_in_path,0) win32gui.DestroyIcon(small[0]) hdc = win32ui.CreateDCFromHandle( win32gui.GetDC(0) ) hbmp = win32ui.CreateBitmap() hbmp.CreateCompatibleBitmap( hdc, ico_x, ico_x ) hdc = hdc.CreateCompatibleDC() hdc.SelectObject( hbmp ) hdc.DrawIcon( (0,0), large[0] ) bmpstr = hbmp.GetBitmapBits(True) icon = Image.frombuffer( 'RGBA', (32,32), bmpstr, 'raw', 'BGRA', 0, 1 ) full_outpath = os.path.join(icon_out_path, \"{}.png\".format(icon_name)) icon.resize((out_width, out_height)) icon.save(full_outpath) #return the final path to the image return full_outpath original source","title":"Py3 Extract icon from exe and save as png (with alpha)"},{"location":"taowiki/python3/python3-snippets/latest_installed_program/","text":"#!python3 import winreg def latest_installed_program(software_name, search_64_first=True, first_call = True): \"\"\"Try to find the latest installed version of a specified program on the system Args: software_name (string): name of the software to look for (3ds Max, Autodesk Maya etc.) search_64_first (int): where to check first, if you know it's going to be winreg.KEY_WOW64_32KEY then put first_call (bool): Don't set this manually. Returns: dictionary: dictionary with the latest program info in it. Example usage: latest_installed_program(\"3ds Max\", True ) \"\"\" win_flag = None if search_64_first: win_flag = winreg.KEY_WOW64_64KEY else: win_flag = winreg.KEY_WOW64_32KEY hive=winreg.HKEY_LOCAL_MACHINE aReg = winreg.ConnectRegistry(None, hive) icons = r\"HKEY_CLASSES_ROOT\\Installer\\Products\\\"\" aKey = winreg.OpenKey(aReg, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\", 0, winreg.KEY_READ | win_flag) count_subkey = winreg.QueryInfoKey(aKey)[0] #way to make it so we don't infinite loop latest_version = {} latest_version[\"version\"] = 0 for i in range(count_subkey): software = {} try: asubkey_name = winreg.EnumKey(aKey, i) asubkey = winreg.OpenKey(aKey, asubkey_name) name = winreg.QueryValueEx(asubkey, \"DisplayName\")[0] if software_name.lower() in name.lower(): software['name'] = name try: software['version'] = winreg.QueryValueEx(asubkey, \"DisplayVersion\")[0] except EnvironmentError: software['version'] = 'undefined' try: software['publisher'] = winreg.QueryValueEx(asubkey, \"Publisher\")[0] except EnvironmentError: software['publisher'] = 'undefined' try: software['path'] = \"{}\".format(winreg.QueryValueEx(asubkey, \"InstallLocation\")[0]) except EnvironmentError: software['path'] = 'undefined' if software[\"version\"] > str(latest_version[\"version\"]) or latest_version[\"version\"] == 0: latest_version = software except EnvironmentError: continue #search the other flag if search_64_first: search_64_first = False else: search_64_first = True if first_call and latest_version[\"version\"] == 0: latest_version = latest_installed_program(software_name, search_64_first, False) return latest_version latest_installed_program(\"Autodesk Maya\") latest_installed_program(\"3ds Max\") latest_installed_program(\"Photoshop\") \"\"\" returns #3ds Max {'version': '20.4.0.4254', 'publisher': 'Autodesk', 'path': 'C:\\\\Program Files\\\\Autodesk\\\\3ds Max 2018\\\\', 'name': 'Autodesk 3ds Max 2018'} Autodesk Maya {'version': '18.0.0.5870', 'publisher': 'Autodesk', 'path': 'D:\\\\Program Files\\\\Autodesk\\\\Maya2018\\\\', 'name': 'Autodesk Maya 2018'} Photoshop {'version': '20.0.1', 'publisher': 'Adobe Systems Incorporated', 'path': 'C:\\\\Program Files\\\\Adobe\\\\Adobe Photoshop CC 2019', 'name': 'Adobe Photoshop CC 2019'} \"\"\"","title":"Find Latest Installed Program on System"},{"location":"taowiki/python3/python3-snippets/threaded_animation/","text":"Little class for programs that need a \"I'm not frozen\" animation for console printing Has an animated character in the console like -> | / - \\ It should be noted that you use cursor_anim.start() to start it and cursor_anim.stop(bool) to stop it Do not use the run function to start it as it will just loop forever (and that is called by the cursor_anim.start() Setup is like cursor_anim = CursorAnimation() cursor_anim.wip_msg = \"Doing a thing that takes a while...\" cursor_anim.success_msg = \"Successfully did the long thing!\" cursor_anim.fail_msg = \"Failed to do the thing!\" cursor_anim.start() # do long code # after code is done or if code has failed # if True is passed in stop that means you've done it successfully # and the success_msg will be printed, else if False, the fail_msg cursor_anim.stop(True) import threading import time class CursorAnimation(threading.Thread): \"\"\"Threaded class to provide an animation in the console while syncing different parts/Files Attributes: fail_msg (str): Message to print at the end when Stop is called with False success_msg (str): Message to print at the end when Stop is called with True wip_msg (str): Message to print while doing the task \"\"\" def __init__(self): self.flag = True self.animation_char = \"|/-\\\\\" self.idx = 0 threading.Thread.__init__(self) self.wip_msg = \"DOING STUFF\" self.success_msg = \"DID THE THING!\" self.fail_msg = \"WE DID NOT DO THE THING!\" self.max_len = 0 def run(self): self.max_len = len(max([self.wip_msg, self.success_msg, self.fail_msg], key=len)) + 1 #skip to a new line so we know we're not going to get wonky print animations print(\"\\n\") while self.flag: print(\"{}{}\".format(self.wip_msg, self.animation_char[self.idx % len(self.animation_char)]).ljust(self.max_len, \" \"), end=\"\\r\") self.idx += 1 time.sleep(0.1) def stop(self, success): \"\"\"success is a bool to trigger either success or fail message \"\"\" self.flag = False if success: print(\"{}\".format(self.success_msg.ljust(self.max_len, \" \")), end=\"\\r\") else: print(\"{}\".format(self.fail_msg.ljust(self.max_len, \" \")), end=\"\\r\") original source","title":"Console: Threaded \"WIP\" animation"},{"location":"taowiki/ta-101/job-descriptions/","text":"","title":"Tech Art Job Descriptions"},{"location":"taowiki/ta-101/ta-coding-101/","text":"Useful links TA coding 101 by Steve Theodore {:target=\"_blank\"}","title":"Tech Art Coding 101"},{"location":"taowiki/ta-101/ta-coding-101/#useful-links","text":"TA coding 101 by Steve Theodore {:target=\"_blank\"}","title":"Useful links"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-film/","text":"Work in Progress References: python-for-feature-film technical-artist-job-description-at-your-company what-makes-a-good-tech-art-director GDC 2010: How to Train your Technical Artist Polycount wiki - Technical Art Other tool dev examples What is a technical game designer? tool-development-roles Tools Engineer Recruiting FAQ The Problem With Ad-Hoc Tools Teams Best of Comments: Ad-hoc and GDC GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience","title":"Tech Art Job Descriptions in Film"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-film/#work-in-progress","text":"","title":"Work in Progress"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-film/#references","text":"python-for-feature-film technical-artist-job-description-at-your-company what-makes-a-good-tech-art-director GDC 2010: How to Train your Technical Artist Polycount wiki - Technical Art","title":"References:"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-film/#other-tool-dev-examples","text":"What is a technical game designer? tool-development-roles Tools Engineer Recruiting FAQ The Problem With Ad-Hoc Tools Teams Best of Comments: Ad-hoc and GDC GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience","title":"Other tool dev examples"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/","text":"This is a Work in Progress What is a Technical Artist? The Technical Artist role is about wearing hats and solving problems. The Technical Artist wears a number of hats depending on the following: the current stage of the project the size of the team/studio seniority/management role Tech art interviews Watch the Tech Art interviews made at GDC by Bill Crosbie Tech art interviews {:target=\"_blank\"} Technical Artist Day-to-day provide technical support to artists for issues in the art production pipeline provide technical support for outsourcing help debug issues in complex assets (skeleton rigs) Technical Artist Responsibilities & Objectives Solving Problem, Support & Troubleshooting Production Stage: Pre-production outline problem areas of the art production pipeline Production Stage: Production make sure the ramping up of artists on to the project is as smooth as possible help outside vendors set up the required pipelines for outsourcing workflows Production Stage: Finalling providing feedback and help artists get their content within the performance budget Develop Tools develop/support tools/plug-ins inside DCC tools with the use of built-in scripting languages (Python, MAXScript, MEL) develop/support standalone tools for the content production pipeline to improve/automate the workflow of artists (Python, C#, Rust, C++) integrate new Digital Content Creation packages into the existing pipeline by writing data exporters/importers collaborate with Tools Engineers by providing feedback and test data sets Communication and Advocacy bridging the gap between engineering and content creations departments bringing the artist perspective to technical discussions and vice versa work closely with lead artists and department heads set up feedback and QA process for outsourced art work training and mentoring artists (new workflows, new DCC packages, new tools) Pipeline Architect, Pipeline Design Production Stage: Pre-production conduct postmortems of previous production pipeline technology develop new ways to make the production pipeline more efficient help with the pre-production stage for select art departments (the art discipline you specialize in) define and set up new authoring pipelines Research and Development Production Stage: Pre-production/Production research and development of new pipeline technology help engine programmers define new engine features help programmers test new technologies and provide feedback decide on using new DCC packages evaluate updates to DCC packages that are in use research/prototype rendering techniques Technical Artist Goals Develop & Support the Game create and prototype shaders for the game debug and fix complicated content related game bugs work on game VFX work with engine programers on new game features Content Budgets and Optimization manage content budgets help optimize art assets while keeping the visual quality help cleanup scenes help produce content production guidelines to keep assets within budgets Documentation develop and maintain documentation for workflows and pipeline tools document best practices and guidelines for content creation Technical Artist Traits Skills, Knowledge, Experience This section ia a Work in Progress Revision Control comfortable with at least one of the following Perforce {:target=\"_blank\"} git {:target=\"_blank\"} SVN {:target=\"_blank\"} Scripting/Programming Languages comfortable with at least one of the following Python 3 {:target=\"_blank\"} C# {:target=\"_blank\"} C/C++ {:target=\"_blank\"} Rust {:target=\"_blank\"} JavaScript {:target=\"_blank\"} Game Engines be familiar with at least one game engine pipeline Unity {:target=\"_blank\"} Unreal {:target=\"_blank\"} CRYENGINE {:target=\"_blank\"} Godot {:target=\"_blank\"} Lumberyard {:target=\"_blank\"} GUI frameworks Qt (C++) {:target=\"_blank\"} PySide2 or Qt for Python {:target=\"_blank\"} PyQt {:target=\"_blank\"} Digital Content Creation tools have a deep knowledge of at least one Blender {:target=\"_blank\"} Houdini {:target=\"_blank\"} Substance Suite {:target=\"_blank\"} Photoshop {:target=\"_blank\"} Zbrush {:target=\"_blank\"} Quixel Suite {:target=\"_blank\"} Modo {:target=\"_blank\"} Mudbox {:target=\"_blank\"} Maya {:target=\"_blank\"} 3ds Max {:target=\"_blank\"} MotionBuilder {:target=\"_blank\"} Databases be familiar with at least one db technology Note: some TA positions won't require this knowledge. But as you become senior this knowledge will become valuable. NoSQL {:target=\"_blank\"} SQL {:target=\"_blank\"} Quick Learner quickly learn new art packages keep track of new industry standards and trends hone skills in a selected art discipline TBD... Technical Artist Specializations Disciplines Animation/Rigging {:target=\"_blank\"} Shaders {:target=\"_blank\"} Visual Effects {:target=\"_blank\"} Procedural {:target=\"_blank\"} Pipeline {:target=\"_blank\"} Management {:target=\"_blank\"} References: Technical Artist job description at your company {:target=\"_blank\"} Technical Artist Guidelines by Eric Chadwick {:target=\"_blank\"} TA KPIS by Steve Theodore {:target=\"_blank\"} TA coding 101 by Steve Theodore {:target=\"_blank\"} The Code/Art Divide: How Technical Artists Bridge The Gap {:target=\"_blank\"} Technical Directors in film and games {:target=\"_blank\"} Effective 3D Exporter Design {:target=\"_blank\"} TA: Keeper of the Pipe v1.7 {:target=\"_blank\"} Technical Art at Riot Games {:target=\"_blank\"} Technical Artist Job {:target=\"_blank\"} Python For Feature Film {:target=\"_blank\"} What makes a great tech art director? {:target=\"_blank\"} Polycount wiki - Technical Art {:target=\"_blank\"} Tech Artist - What are you working on: FOREVER Edition! {:target=\"_blank\"} GDC GDC 2010: How to Train your Technical Artist {:target=\"_blank\"} YouTube Tech Art Interviews Pipeliner Books \"Production Pipeline Fundamentals for Film and Games\" {:target=\"_blank\"} \"Rigging for Games: A Primer for Technical Artists Using Maya and Python\" {:target=\"_blank\"} Other Languages Russian Podcast \"How Games Are Made\" with Michael Kuzmin & Sergey Galyonkin Part 1 {:target=\"_blank\"} Part 2 {:target=\"_blank\"} Examples of other Tool Dev Roles: What is a technical game designer? {:target=\"_blank\"} tool-development-roles {:target=\"_blank\"} Tools Engineer Recruiting FAQ {:target=\"_blank\"} The Problem With Ad-Hoc Tools Teams {:target=\"_blank\"} Best of Comments: Ad-hoc and GDC {:target=\"_blank\"} GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience {:target=\"_blank\"}","title":"Tech Art Job Descriptions in Games"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#what-is-a-technical-artist","text":"The Technical Artist role is about wearing hats and solving problems. The Technical Artist wears a number of hats depending on the following: the current stage of the project the size of the team/studio seniority/management role","title":"What is a Technical Artist?"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#tech-art-interviews","text":"Watch the Tech Art interviews made at GDC by Bill Crosbie Tech art interviews {:target=\"_blank\"}","title":"Tech art interviews"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#technical-artist-day-to-day","text":"provide technical support to artists for issues in the art production pipeline provide technical support for outsourcing help debug issues in complex assets (skeleton rigs)","title":"Technical Artist Day-to-day"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#technical-artist-responsibilities-objectives","text":"","title":"Technical Artist Responsibilities &amp; Objectives"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#solving-problem-support-troubleshooting","text":"","title":"Solving Problem, Support &amp; Troubleshooting"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#production-stage-pre-production","text":"outline problem areas of the art production pipeline","title":"Production Stage: Pre-production"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#production-stage-production","text":"make sure the ramping up of artists on to the project is as smooth as possible help outside vendors set up the required pipelines for outsourcing workflows","title":"Production Stage: Production"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#production-stage-finalling","text":"providing feedback and help artists get their content within the performance budget","title":"Production Stage: Finalling"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#develop-tools","text":"develop/support tools/plug-ins inside DCC tools with the use of built-in scripting languages (Python, MAXScript, MEL) develop/support standalone tools for the content production pipeline to improve/automate the workflow of artists (Python, C#, Rust, C++) integrate new Digital Content Creation packages into the existing pipeline by writing data exporters/importers collaborate with Tools Engineers by providing feedback and test data sets","title":"Develop Tools"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#communication-and-advocacy","text":"bridging the gap between engineering and content creations departments bringing the artist perspective to technical discussions and vice versa work closely with lead artists and department heads set up feedback and QA process for outsourced art work training and mentoring artists (new workflows, new DCC packages, new tools)","title":"Communication and Advocacy"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#pipeline-architect-pipeline-design","text":"","title":"Pipeline Architect, Pipeline Design"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#production-stage-pre-production_1","text":"conduct postmortems of previous production pipeline technology develop new ways to make the production pipeline more efficient help with the pre-production stage for select art departments (the art discipline you specialize in) define and set up new authoring pipelines","title":"Production Stage: Pre-production"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#research-and-development","text":"","title":"Research and Development"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#production-stage-pre-productionproduction","text":"research and development of new pipeline technology help engine programmers define new engine features help programmers test new technologies and provide feedback decide on using new DCC packages evaluate updates to DCC packages that are in use research/prototype rendering techniques","title":"Production Stage: Pre-production/Production"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#technical-artist-goals","text":"","title":"Technical Artist Goals"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#develop-support-the-game","text":"create and prototype shaders for the game debug and fix complicated content related game bugs work on game VFX work with engine programers on new game features","title":"Develop &amp; Support the Game"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#content-budgets-and-optimization","text":"manage content budgets help optimize art assets while keeping the visual quality help cleanup scenes help produce content production guidelines to keep assets within budgets","title":"Content Budgets and Optimization"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#documentation","text":"develop and maintain documentation for workflows and pipeline tools document best practices and guidelines for content creation","title":"Documentation"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#technical-artist-traits","text":"Skills, Knowledge, Experience","title":"Technical Artist Traits"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#revision-control","text":"comfortable with at least one of the following Perforce {:target=\"_blank\"} git {:target=\"_blank\"} SVN {:target=\"_blank\"}","title":"Revision Control"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#scriptingprogramming-languages","text":"comfortable with at least one of the following Python 3 {:target=\"_blank\"} C# {:target=\"_blank\"} C/C++ {:target=\"_blank\"} Rust {:target=\"_blank\"} JavaScript {:target=\"_blank\"}","title":"Scripting/Programming Languages"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#game-engines","text":"be familiar with at least one game engine pipeline Unity {:target=\"_blank\"} Unreal {:target=\"_blank\"} CRYENGINE {:target=\"_blank\"} Godot {:target=\"_blank\"} Lumberyard {:target=\"_blank\"}","title":"Game Engines"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#gui-frameworks","text":"Qt (C++) {:target=\"_blank\"} PySide2 or Qt for Python {:target=\"_blank\"} PyQt {:target=\"_blank\"}","title":"GUI frameworks"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#digital-content-creation-tools","text":"have a deep knowledge of at least one Blender {:target=\"_blank\"} Houdini {:target=\"_blank\"} Substance Suite {:target=\"_blank\"} Photoshop {:target=\"_blank\"} Zbrush {:target=\"_blank\"} Quixel Suite {:target=\"_blank\"} Modo {:target=\"_blank\"} Mudbox {:target=\"_blank\"} Maya {:target=\"_blank\"} 3ds Max {:target=\"_blank\"} MotionBuilder {:target=\"_blank\"}","title":"Digital Content Creation tools"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#databases","text":"be familiar with at least one db technology Note: some TA positions won't require this knowledge. But as you become senior this knowledge will become valuable. NoSQL {:target=\"_blank\"} SQL {:target=\"_blank\"}","title":"Databases"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#quick-learner","text":"quickly learn new art packages keep track of new industry standards and trends hone skills in a selected art discipline","title":"Quick Learner"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#tbd","text":"","title":"TBD..."},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#technical-artist-specializations","text":"Disciplines","title":"Technical Artist Specializations"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#animationriggingtarget_blank","text":"","title":"Animation/Rigging{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#shaderstarget_blank","text":"","title":"Shaders{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#visual-effectstarget_blank","text":"","title":"Visual Effects{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#proceduraltarget_blank","text":"","title":"Procedural{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#pipelinetarget_blank","text":"","title":"Pipeline{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#managementtarget_blank","text":"","title":"Management{:target=\"_blank\"}"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#references","text":"Technical Artist job description at your company {:target=\"_blank\"} Technical Artist Guidelines by Eric Chadwick {:target=\"_blank\"} TA KPIS by Steve Theodore {:target=\"_blank\"} TA coding 101 by Steve Theodore {:target=\"_blank\"} The Code/Art Divide: How Technical Artists Bridge The Gap {:target=\"_blank\"} Technical Directors in film and games {:target=\"_blank\"} Effective 3D Exporter Design {:target=\"_blank\"} TA: Keeper of the Pipe v1.7 {:target=\"_blank\"} Technical Art at Riot Games {:target=\"_blank\"} Technical Artist Job {:target=\"_blank\"} Python For Feature Film {:target=\"_blank\"} What makes a great tech art director? {:target=\"_blank\"} Polycount wiki - Technical Art {:target=\"_blank\"} Tech Artist - What are you working on: FOREVER Edition! {:target=\"_blank\"}","title":"References:"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#gdc","text":"GDC 2010: How to Train your Technical Artist {:target=\"_blank\"}","title":"GDC"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#youtube","text":"Tech Art Interviews Pipeliner","title":"YouTube"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#books","text":"\"Production Pipeline Fundamentals for Film and Games\" {:target=\"_blank\"} \"Rigging for Games: A Primer for Technical Artists Using Maya and Python\" {:target=\"_blank\"}","title":"Books"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#other-languages","text":"","title":"Other Languages"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#russian","text":"Podcast \"How Games Are Made\" with Michael Kuzmin & Sergey Galyonkin Part 1 {:target=\"_blank\"} Part 2 {:target=\"_blank\"}","title":"Russian"},{"location":"taowiki/ta-101/job-descriptions/job-descriptions-games/#examples-of-other-tool-dev-roles","text":"What is a technical game designer? {:target=\"_blank\"} tool-development-roles {:target=\"_blank\"} Tools Engineer Recruiting FAQ {:target=\"_blank\"} The Problem With Ad-Hoc Tools Teams {:target=\"_blank\"} Best of Comments: Ad-hoc and GDC {:target=\"_blank\"} GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience {:target=\"_blank\"}","title":"Examples of other Tool Dev Roles:"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/animation-n-rigging/","text":"This is a Work in Progress This is a page with describing a Technical Art specialization in Animation/Rigging. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page . Animation/Rigging TA Core Responsibilities & Objectives \"They are responsible for character setup and technical support for character animation throughout production. They work with the game team to determine animation setup and support solutions.\" Animation/Rigging TA Core Traits Skills, Knowledge, Experience Note: The lower down the list the more senior the TA References:","title":"Animation/Rigging Tech Art Job Description in Games"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/animation-n-rigging/#this-is-a-work-in-progress","text":"This is a page with describing a Technical Art specialization in Animation/Rigging. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page .","title":"This is a Work in Progress"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/animation-n-rigging/#animationrigging-ta-core-responsibilities-objectives","text":"\"They are responsible for character setup and technical support for character animation throughout production. They work with the game team to determine animation setup and support solutions.\"","title":"Animation/Rigging TA Core Responsibilities &amp; Objectives"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/animation-n-rigging/#animationrigging-ta-core-traits","text":"Skills, Knowledge, Experience Note: The lower down the list the more senior the TA","title":"Animation/Rigging TA Core Traits"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/animation-n-rigging/#references","text":"","title":"References:"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/pipeline/","text":"This is a Work in Progress This is a page with describing a Technical Art specialization in Pipeline. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page . Pipeline TA Core Responsibilities & Objectives \"They are responsible for development of software tools in all areas of the production pipeline. They coordinate with the game team on tool and process integration and optimization.\" Pipeline TA Core Traits Skills, Knowledge, Experience Note: The lower down the list the more senior the TA References:","title":"Pipeline Tech Art Job Description in Games"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/pipeline/#this-is-a-work-in-progress","text":"This is a page with describing a Technical Art specialization in Pipeline. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page .","title":"This is a Work in Progress"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/pipeline/#pipeline-ta-core-responsibilities-objectives","text":"\"They are responsible for development of software tools in all areas of the production pipeline. They coordinate with the game team on tool and process integration and optimization.\"","title":"Pipeline TA Core Responsibilities &amp; Objectives"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/pipeline/#pipeline-ta-core-traits","text":"Skills, Knowledge, Experience Note: The lower down the list the more senior the TA","title":"Pipeline TA Core Traits"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/pipeline/#references","text":"","title":"References:"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/shaders/","text":"This is a Work in Progress This is a page with describing a Technical Art specialization in Shaders. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page . Shaders TA Core Responsibilities & Objectives \"They are responsible for the creation of efficient real-time (HLSL) and multi-level shaders. They must have strong technical skills, including experience in software design and implementation and knowledge of math and physics theories. They must also have strong artistic skills with a proven ability to create cinematic color and lighting in digital media.\" Shaders TA Core Traits Skills, Knowledge, Experience Note: The lower down the list the more senior the TA References:","title":"Shaders Tech Art Job Description in Games"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/shaders/#this-is-a-work-in-progress","text":"This is a page with describing a Technical Art specialization in Shaders. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page .","title":"This is a Work in Progress"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/shaders/#shaders-ta-core-responsibilities-objectives","text":"\"They are responsible for the creation of efficient real-time (HLSL) and multi-level shaders. They must have strong technical skills, including experience in software design and implementation and knowledge of math and physics theories. They must also have strong artistic skills with a proven ability to create cinematic color and lighting in digital media.\"","title":"Shaders TA Core Responsibilities &amp; Objectives"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/shaders/#shaders-ta-core-traits","text":"Skills, Knowledge, Experience Note: The lower down the list the more senior the TA","title":"Shaders TA Core Traits"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/shaders/#references","text":"","title":"References:"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/visual-effects/","text":"This is a Work in Progress This is a page with describing a Technical Art specialization in Visual Effects. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page . Visual Effects TA Core Responsibilities & Objectives \"They are responsible for the design and implementation of the technical aspects in-game effects. They create and maintain tools, systems, and setups used to create particle effects, cloth, hair, procedural effects, lighting, and compositing.\" Visual Effects TA Core Traits Skills, Knowledge, Experience Note: The lower down the list the more senior the TA References:","title":"Visual Effects Tech Art Job Description in Games"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/visual-effects/#this-is-a-work-in-progress","text":"This is a page with describing a Technical Art specialization in Visual Effects. For the core skills and responsibilities of a TA please visit the general Tech Art Job Description page .","title":"This is a Work in Progress"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/visual-effects/#visual-effects-ta-core-responsibilities-objectives","text":"\"They are responsible for the design and implementation of the technical aspects in-game effects. They create and maintain tools, systems, and setups used to create particle effects, cloth, hair, procedural effects, lighting, and compositing.\"","title":"Visual Effects TA Core Responsibilities &amp; Objectives"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/visual-effects/#visual-effects-ta-core-traits","text":"Skills, Knowledge, Experience Note: The lower down the list the more senior the TA","title":"Visual Effects TA Core Traits"},{"location":"taowiki/ta-101/job-descriptions/game-ta-disciplines/visual-effects/#references","text":"","title":"References:"},{"location":"taowiki/unity/drop_selected_model_to_ground/","text":"Editor Script/Menu Item - Put in script in Editor Folder. Allows for a single selected object to be dropped to the next nearest model below it. Model that is dropped to ground is dropped to the pivot (something to note if your pivots are center of model etc) using System.Collections.Generic; using System.Linq; using Luna; using UnityEditor; using UnityEngine; public class EditorMenuItems : MonoBehaviour { [MenuItem(\"GameObject/Set Object On Ground - No Collider #G\", false, 10)] private static void SetObjectOnGround() { GameObject selection = Selection.activeGameObject; Transform[] allObjects = UnityEngine.Object.FindObjectsOfType<Transform>() ; //Try to find the objects that are closest to the current GO IEnumerable<Transform> closeObjects = allObjects.Where(o => o.position.y < selection.transform.position.y && o.gameObject != selection.gameObject && o.GetComponent<MeshRenderer>() && PointContainedIn2DPlane(selection.transform.position, o.GetComponent<MeshRenderer>().bounds)); Vector3 hitPoint = Vector3.zero; float closestDist = 10000; foreach (Transform closeObject in closeObjects) { RaycastHit hit = new RaycastHit(); bool bHit = HandleUtilityWrapper.IntersectRayMesh(new Ray(selection.transform.position, Vector3.down), closeObject.GetComponent<MeshFilter>(), out hit); if (!bHit) { continue; } if (hit.distance < closestDist) { // Debug.Log($\"Updating Closest: {closeObject.name} dist:{hit.distance}\"); hitPoint = hit.point; closestDist = hit.distance; } } Vector3 position = selection.transform.position; position = new Vector3(position.x, hitPoint.y, position.z); selection.transform.position = position; } private static bool PointContainedIn2DPlane(Vector3 point, Bounds bounds) { if ((point.x > bounds.min.x && point.x < bounds.max.x) && (point.z > bounds.min.z && point.z < bounds.max.z)) { return true; } return false; } } Class that opens access to mesh ray casting (Code adapted from Gist ) using System; using System.Reflection; using UnityEngine; using UnityEditor; using System.Linq; \u200b // Allows for access to Unity function that they haven't made public (through reflection) // Makes it so we can do mesh raycasting (no colliders) [InitializeOnLoad] public static class HandleUtilityWrapper { private static readonly Type HandleUtility; private static readonly MethodInfo IntersectRayMeshMethodInfo; \u200b static HandleUtilityWrapper() { var editorTypes = typeof(Editor).Assembly.GetTypes(); HandleUtility = editorTypes.FirstOrDefault(t => t.Name == \"HandleUtility\"); IntersectRayMeshMethodInfo = HandleUtility.GetMethod(\"IntersectRayMesh\", BindingFlags.Static | BindingFlags.NonPublic); } \u200b public static bool IntersectRayMesh(Ray ray, MeshFilter meshFilter, out RaycastHit hit) { return IntersectRayMesh(ray, meshFilter.sharedMesh, meshFilter.transform.localToWorldMatrix, out hit); } \u200b private static object[] _parms = new object[4]; \u200b public static bool IntersectRayMesh(Ray ray, Mesh mesh, Matrix4x4 matrix, out RaycastHit hit) { _parms[0] = ray; _parms[1] = mesh; _parms[2] = matrix; _parms[3] = null; \u200b var result = (bool) IntersectRayMeshMethodInfo.Invoke(null, _parms); hit = (RaycastHit) _parms[3]; return result; } } \u200b original source","title":"Drop Selected Model To Ground(or closest model below) (No Colliders Needed)"},{"location":"taowiki/unreal/how_to_make_an_actor_that_can_tick_in_editor/","text":"Why not use an Editor Utility Actor? Editor Utility Actors don't quite get you the exact functionality that seems useful enough for ticking in the editor via an actor. It will tick in the preview windows of blueprint and potentially lead to lots of head scratching as you realize that the blueprint you were working on is logging when you are trying to use it in other places. Also, there are times where you actually do want the same actor runtime as well (It's rare but totally a valid case). The Solve.. Make your own actor class! In your custom actor class you can use this to add a bool that toggles being able to tick in the editor. This way whenever you need this you can just simply check it on and get going. It also is separated so that you can have different logic happen in the editor vs in-game. Most of the time I end up with 1-1 anyway but its nice to have the option. header file /** Allows Tick To happen in the editor viewport*/ virtual bool ShouldTickIfViewportsOnly() const override; UPROPERTY(BlueprintReadWrite, EditAnywhere) bool UseEditorTick = false; /** Tick that runs ONLY in the editor viewport.*/ UFUNCTION(BlueprintImplementableEvent, CallInEditor, Category = \"Events\") void BlueprintEditorTick(float DeltaTime); cpp file // Separated Tick functionality and making sure that it truly can only happen in the editor. Might be a bit overkill but you can easily consolidate if you'd like. void YourActor::Tick(float DeltaTime) { if (GetWorld() != nullptr && GetWorld()->WorldType == EWorldType::Editor) { #if WITH_EDITOR BlueprintEditorTick(DeltaTime); #endif } else { Super::Tick(DeltaTime); } } // This ultimately is what controls whether or not it can even tick at all in the editor view port. But, it is EVERY view port so it still needs to be blocked from preview windows and junk. bool YourActor::ShouldTickIfViewportsOnly() const { if (GetWorld() != nullptr && GetWorld()->WorldType == EWorldType::Editor && UseEditorTick) { return true; } else { return false; } } Then when you are done you should be able to add the new BlueprintEditorTick to your event graph and get rolling! Final Notes This is pretty dangerous if you aren't mindful with what nodes you use in here. Try not to do things like Add Component or any other nodes that would spawn objects into the world or if you do make sure you store them and clean them up. Delays might work but they could be a bit odd as well. Just be aware that it can be fragile at times so make sure to give unreal some cake beforehand... \u2764\ufe0f original source","title":"[Unreal] How to make an actor that can Tick In Editor"},{"location":"taowiki/unreal/how_to_make_an_actor_that_can_tick_in_editor/#why-not-use-an-editor-utility-actor","text":"Editor Utility Actors don't quite get you the exact functionality that seems useful enough for ticking in the editor via an actor. It will tick in the preview windows of blueprint and potentially lead to lots of head scratching as you realize that the blueprint you were working on is logging when you are trying to use it in other places. Also, there are times where you actually do want the same actor runtime as well (It's rare but totally a valid case).","title":"Why not use an Editor Utility Actor?"},{"location":"taowiki/unreal/how_to_make_an_actor_that_can_tick_in_editor/#the-solve-make-your-own-actor-class","text":"In your custom actor class you can use this to add a bool that toggles being able to tick in the editor. This way whenever you need this you can just simply check it on and get going. It also is separated so that you can have different logic happen in the editor vs in-game. Most of the time I end up with 1-1 anyway but its nice to have the option. header file /** Allows Tick To happen in the editor viewport*/ virtual bool ShouldTickIfViewportsOnly() const override; UPROPERTY(BlueprintReadWrite, EditAnywhere) bool UseEditorTick = false; /** Tick that runs ONLY in the editor viewport.*/ UFUNCTION(BlueprintImplementableEvent, CallInEditor, Category = \"Events\") void BlueprintEditorTick(float DeltaTime); cpp file // Separated Tick functionality and making sure that it truly can only happen in the editor. Might be a bit overkill but you can easily consolidate if you'd like. void YourActor::Tick(float DeltaTime) { if (GetWorld() != nullptr && GetWorld()->WorldType == EWorldType::Editor) { #if WITH_EDITOR BlueprintEditorTick(DeltaTime); #endif } else { Super::Tick(DeltaTime); } } // This ultimately is what controls whether or not it can even tick at all in the editor view port. But, it is EVERY view port so it still needs to be blocked from preview windows and junk. bool YourActor::ShouldTickIfViewportsOnly() const { if (GetWorld() != nullptr && GetWorld()->WorldType == EWorldType::Editor && UseEditorTick) { return true; } else { return false; } } Then when you are done you should be able to add the new BlueprintEditorTick to your event graph and get rolling!","title":"The Solve.. Make your own actor class!"},{"location":"taowiki/unreal/how_to_make_an_actor_that_can_tick_in_editor/#final-notes","text":"This is pretty dangerous if you aren't mindful with what nodes you use in here. Try not to do things like Add Component or any other nodes that would spawn objects into the world or if you do make sure you store them and clean them up. Delays might work but they could be a bit odd as well. Just be aware that it can be fragile at times so make sure to give unreal some cake beforehand... \u2764\ufe0f original source","title":"Final Notes"},{"location":"taowiki/unreal/tickable_pyside2_window_baseclass/","text":"Using the below baseclass, You can have a tickable window for PySide2 UI To subscribe to the tick, it should be something like self.sig_tick.connect(self.my_func) BASE CLASS import unreal from PySide2 import QtWidgets from PySide2.QtCore import Signal class QtUE_Window(QtWidgets.QMainWindow): # Signal that can be conneted to for tick functionality sig_tick = Signal(float) def __init__(self, parent=None): super(QtUE_Window, self).__init__(parent) self.tick_handle = unreal.register_slate_post_tick_callback(self.__QtAppTick__) def __QtAppTick__(self, delta_seconds): # This function will receive the tick from Unreal QtWidgets.QApplication.processEvents() self.sig_tick.emit(delta_seconds) def __QtAppQuit__(self): # This function will be called when the application is closing. unreal.unregister_slate_post_tick_callback(self.tick_handle) def closeEvent(self, event): super(QtUE_Window, self).closeEvent(event) self.__QtAppQuit__() original source","title":"Tickable PySide2 Window BaseClass"},{"location":"taowiki/unreal/tickable_pyside2_window_baseclass/#base-class","text":"import unreal from PySide2 import QtWidgets from PySide2.QtCore import Signal class QtUE_Window(QtWidgets.QMainWindow): # Signal that can be conneted to for tick functionality sig_tick = Signal(float) def __init__(self, parent=None): super(QtUE_Window, self).__init__(parent) self.tick_handle = unreal.register_slate_post_tick_callback(self.__QtAppTick__) def __QtAppTick__(self, delta_seconds): # This function will receive the tick from Unreal QtWidgets.QApplication.processEvents() self.sig_tick.emit(delta_seconds) def __QtAppQuit__(self): # This function will be called when the application is closing. unreal.unregister_slate_post_tick_callback(self.tick_handle) def closeEvent(self, event): super(QtUE_Window, self).closeEvent(event) self.__QtAppQuit__() original source","title":"BASE CLASS"}]}